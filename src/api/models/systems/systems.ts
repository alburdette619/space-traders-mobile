/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { GetConstruction200 } from "../getConstruction200";

import type { GetJumpGate200 } from "../getJumpGate200";

import type { GetMarket200 } from "../getMarket200";

import type { GetShipyard200 } from "../getShipyard200";

import type { GetSystem200 } from "../getSystem200";

import type { GetSystemWaypoints200 } from "../getSystemWaypoints200";

import type { GetSystemWaypointsParams } from "../getSystemWaypointsParams";

import type { GetSystems200 } from "../getSystems200";

import type { GetSystemsParams } from "../getSystemsParams";

import type { GetWaypoint200 } from "../getWaypoint200";

import type { SupplyConstruction201 } from "../supplyConstruction201";

import type { SupplyConstructionBody } from "../supplyConstructionBody";

import { clientInstance } from "../../client";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Return a paginated list of all systems.
 * @summary List Systems
 */
export const getSystems = (
  params?: GetSystemsParams,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetSystems200>(
    { url: `/systems`, method: "GET", params, signal },
    options,
  );
};

export const getGetSystemsQueryKey = (params?: GetSystemsParams) => {
  return [`/systems`, ...(params ? [params] : [])] as const;
};

export const getGetSystemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSystems>>,
  TError = unknown,
>(
  params?: GetSystemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystems>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSystemsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystems>>> = ({
    signal,
  }) => getSystems(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSystems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSystemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSystems>>
>;
export type GetSystemsQueryError = unknown;

export function useGetSystems<
  TData = Awaited<ReturnType<typeof getSystems>>,
  TError = unknown,
>(
  params: undefined | GetSystemsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystems>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystems>>,
          TError,
          Awaited<ReturnType<typeof getSystems>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSystems<
  TData = Awaited<ReturnType<typeof getSystems>>,
  TError = unknown,
>(
  params?: GetSystemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystems>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystems>>,
          TError,
          Awaited<ReturnType<typeof getSystems>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSystems<
  TData = Awaited<ReturnType<typeof getSystems>>,
  TError = unknown,
>(
  params?: GetSystemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystems>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Systems
 */

export function useGetSystems<
  TData = Awaited<ReturnType<typeof getSystems>>,
  TError = unknown,
>(
  params?: GetSystemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystems>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSystemsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the details of a system.
 * @summary Get System
 */
export const getSystem = (
  systemSymbol: string = "X1-OE",
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetSystem200>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetSystemQueryKey = (systemSymbol: string = "X1-OE") => {
  return [`/systems/${systemSymbol}`] as const;
};

export const getGetSystemQueryOptions = <
  TData = Awaited<ReturnType<typeof getSystem>>,
  TError = unknown,
>(
  systemSymbol: string = "X1-OE",
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSystemQueryKey(systemSymbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystem>>> = ({
    signal,
  }) => getSystem(systemSymbol, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!systemSymbol,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetSystemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSystem>>
>;
export type GetSystemQueryError = unknown;

export function useGetSystem<
  TData = Awaited<ReturnType<typeof getSystem>>,
  TError = unknown,
>(
  systemSymbol: undefined | string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystem>>,
          TError,
          Awaited<ReturnType<typeof getSystem>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSystem<
  TData = Awaited<ReturnType<typeof getSystem>>,
  TError = unknown,
>(
  systemSymbol?: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystem>>,
          TError,
          Awaited<ReturnType<typeof getSystem>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSystem<
  TData = Awaited<ReturnType<typeof getSystem>>,
  TError = unknown,
>(
  systemSymbol?: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get System
 */

export function useGetSystem<
  TData = Awaited<ReturnType<typeof getSystem>>,
  TError = unknown,
>(
  systemSymbol: string = "X1-OE",
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSystemQueryOptions(systemSymbol, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return a paginated list of all of the waypoints for a given system.

If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
 * @summary List Waypoints in System
 */
export const getSystemWaypoints = (
  systemSymbol: string,
  params?: GetSystemWaypointsParams,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetSystemWaypoints200>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}/waypoints`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getGetSystemWaypointsQueryKey = (
  systemSymbol?: string,
  params?: GetSystemWaypointsParams,
) => {
  return [
    `/systems/${systemSymbol}/waypoints`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetSystemWaypointsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSystemWaypoints>>,
  TError = unknown,
>(
  systemSymbol: string,
  params?: GetSystemWaypointsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSystemWaypoints>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSystemWaypointsQueryKey(systemSymbol, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSystemWaypoints>>
  > = ({ signal }) =>
    getSystemWaypoints(systemSymbol, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!systemSymbol,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSystemWaypoints>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSystemWaypointsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSystemWaypoints>>
>;
export type GetSystemWaypointsQueryError = unknown;

export function useGetSystemWaypoints<
  TData = Awaited<ReturnType<typeof getSystemWaypoints>>,
  TError = unknown,
>(
  systemSymbol: string,
  params: undefined | GetSystemWaypointsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSystemWaypoints>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemWaypoints>>,
          TError,
          Awaited<ReturnType<typeof getSystemWaypoints>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSystemWaypoints<
  TData = Awaited<ReturnType<typeof getSystemWaypoints>>,
  TError = unknown,
>(
  systemSymbol: string,
  params?: GetSystemWaypointsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSystemWaypoints>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemWaypoints>>,
          TError,
          Awaited<ReturnType<typeof getSystemWaypoints>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSystemWaypoints<
  TData = Awaited<ReturnType<typeof getSystemWaypoints>>,
  TError = unknown,
>(
  systemSymbol: string,
  params?: GetSystemWaypointsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSystemWaypoints>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Waypoints in System
 */

export function useGetSystemWaypoints<
  TData = Awaited<ReturnType<typeof getSystemWaypoints>>,
  TError = unknown,
>(
  systemSymbol: string,
  params?: GetSystemWaypointsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSystemWaypoints>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSystemWaypointsQueryOptions(
    systemSymbol,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * View the details of a waypoint.

If the waypoint is uncharted, it will return the 'Uncharted' trait instead of its actual traits.
 * @summary Get Waypoint
 */
export const getWaypoint = (
  systemSymbol: string,
  waypointSymbol: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetWaypoint200>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}/waypoints/${encodeURIComponent(String(waypointSymbol))}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetWaypointQueryKey = (
  systemSymbol?: string,
  waypointSymbol?: string,
) => {
  return [`/systems/${systemSymbol}/waypoints/${waypointSymbol}`] as const;
};

export const getGetWaypointQueryOptions = <
  TData = Awaited<ReturnType<typeof getWaypoint>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWaypoint>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetWaypointQueryKey(systemSymbol, waypointSymbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWaypoint>>> = ({
    signal,
  }) => getWaypoint(systemSymbol, waypointSymbol, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(systemSymbol && waypointSymbol),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWaypoint>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWaypointQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWaypoint>>
>;
export type GetWaypointQueryError = unknown;

export function useGetWaypoint<
  TData = Awaited<ReturnType<typeof getWaypoint>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWaypoint>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWaypoint>>,
          TError,
          Awaited<ReturnType<typeof getWaypoint>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWaypoint<
  TData = Awaited<ReturnType<typeof getWaypoint>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWaypoint>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWaypoint>>,
          TError,
          Awaited<ReturnType<typeof getWaypoint>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWaypoint<
  TData = Awaited<ReturnType<typeof getWaypoint>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWaypoint>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Waypoint
 */

export function useGetWaypoint<
  TData = Awaited<ReturnType<typeof getWaypoint>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWaypoint>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWaypointQueryOptions(
    systemSymbol,
    waypointSymbol,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.

Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
 * @summary Get Market
 */
export const getMarket = (
  systemSymbol: string,
  waypointSymbol: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetMarket200>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}/waypoints/${encodeURIComponent(String(waypointSymbol))}/market`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetMarketQueryKey = (
  systemSymbol?: string,
  waypointSymbol?: string,
) => {
  return [
    `/systems/${systemSymbol}/waypoints/${waypointSymbol}/market`,
  ] as const;
};

export const getGetMarketQueryOptions = <
  TData = Awaited<ReturnType<typeof getMarket>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMarket>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetMarketQueryKey(systemSymbol, waypointSymbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMarket>>> = ({
    signal,
  }) => getMarket(systemSymbol, waypointSymbol, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(systemSymbol && waypointSymbol),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getMarket>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetMarketQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarket>>
>;
export type GetMarketQueryError = unknown;

export function useGetMarket<
  TData = Awaited<ReturnType<typeof getMarket>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMarket>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMarket>>,
          TError,
          Awaited<ReturnType<typeof getMarket>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMarket<
  TData = Awaited<ReturnType<typeof getMarket>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMarket>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMarket>>,
          TError,
          Awaited<ReturnType<typeof getMarket>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMarket<
  TData = Awaited<ReturnType<typeof getMarket>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMarket>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Market
 */

export function useGetMarket<
  TData = Awaited<ReturnType<typeof getMarket>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMarket>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMarketQueryOptions(
    systemSymbol,
    waypointSymbol,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
 * @summary Get Shipyard
 */
export const getShipyard = (
  systemSymbol: string,
  waypointSymbol: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetShipyard200>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}/waypoints/${encodeURIComponent(String(waypointSymbol))}/shipyard`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetShipyardQueryKey = (
  systemSymbol?: string,
  waypointSymbol?: string,
) => {
  return [
    `/systems/${systemSymbol}/waypoints/${waypointSymbol}/shipyard`,
  ] as const;
};

export const getGetShipyardQueryOptions = <
  TData = Awaited<ReturnType<typeof getShipyard>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getShipyard>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetShipyardQueryKey(systemSymbol, waypointSymbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getShipyard>>> = ({
    signal,
  }) => getShipyard(systemSymbol, waypointSymbol, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(systemSymbol && waypointSymbol),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getShipyard>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetShipyardQueryResult = NonNullable<
  Awaited<ReturnType<typeof getShipyard>>
>;
export type GetShipyardQueryError = unknown;

export function useGetShipyard<
  TData = Awaited<ReturnType<typeof getShipyard>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getShipyard>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getShipyard>>,
          TError,
          Awaited<ReturnType<typeof getShipyard>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetShipyard<
  TData = Awaited<ReturnType<typeof getShipyard>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getShipyard>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getShipyard>>,
          TError,
          Awaited<ReturnType<typeof getShipyard>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetShipyard<
  TData = Awaited<ReturnType<typeof getShipyard>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getShipyard>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Shipyard
 */

export function useGetShipyard<
  TData = Awaited<ReturnType<typeof getShipyard>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getShipyard>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetShipyardQueryOptions(
    systemSymbol,
    waypointSymbol,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.

Waypoints connected to this jump gate can be 
 * @summary Get Jump Gate
 */
export const getJumpGate = (
  systemSymbol: string,
  waypointSymbol: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetJumpGate200>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}/waypoints/${encodeURIComponent(String(waypointSymbol))}/jump-gate`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetJumpGateQueryKey = (
  systemSymbol?: string,
  waypointSymbol?: string,
) => {
  return [
    `/systems/${systemSymbol}/waypoints/${waypointSymbol}/jump-gate`,
  ] as const;
};

export const getGetJumpGateQueryOptions = <
  TData = Awaited<ReturnType<typeof getJumpGate>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getJumpGate>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetJumpGateQueryKey(systemSymbol, waypointSymbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getJumpGate>>> = ({
    signal,
  }) => getJumpGate(systemSymbol, waypointSymbol, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(systemSymbol && waypointSymbol),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getJumpGate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetJumpGateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJumpGate>>
>;
export type GetJumpGateQueryError = unknown;

export function useGetJumpGate<
  TData = Awaited<ReturnType<typeof getJumpGate>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getJumpGate>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getJumpGate>>,
          TError,
          Awaited<ReturnType<typeof getJumpGate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetJumpGate<
  TData = Awaited<ReturnType<typeof getJumpGate>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getJumpGate>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getJumpGate>>,
          TError,
          Awaited<ReturnType<typeof getJumpGate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetJumpGate<
  TData = Awaited<ReturnType<typeof getJumpGate>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getJumpGate>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Jump Gate
 */

export function useGetJumpGate<
  TData = Awaited<ReturnType<typeof getJumpGate>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getJumpGate>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetJumpGateQueryOptions(
    systemSymbol,
    waypointSymbol,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
 * @summary Get Construction Site
 */
export const getConstruction = (
  systemSymbol: string,
  waypointSymbol: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetConstruction200>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}/waypoints/${encodeURIComponent(String(waypointSymbol))}/construction`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetConstructionQueryKey = (
  systemSymbol?: string,
  waypointSymbol?: string,
) => {
  return [
    `/systems/${systemSymbol}/waypoints/${waypointSymbol}/construction`,
  ] as const;
};

export const getGetConstructionQueryOptions = <
  TData = Awaited<ReturnType<typeof getConstruction>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConstruction>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetConstructionQueryKey(systemSymbol, waypointSymbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConstruction>>> = ({
    signal,
  }) => getConstruction(systemSymbol, waypointSymbol, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(systemSymbol && waypointSymbol),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getConstruction>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConstructionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConstruction>>
>;
export type GetConstructionQueryError = unknown;

export function useGetConstruction<
  TData = Awaited<ReturnType<typeof getConstruction>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConstruction>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConstruction>>,
          TError,
          Awaited<ReturnType<typeof getConstruction>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConstruction<
  TData = Awaited<ReturnType<typeof getConstruction>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConstruction>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConstruction>>,
          TError,
          Awaited<ReturnType<typeof getConstruction>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConstruction<
  TData = Awaited<ReturnType<typeof getConstruction>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConstruction>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Construction Site
 */

export function useGetConstruction<
  TData = Awaited<ReturnType<typeof getConstruction>>,
  TError = unknown,
>(
  systemSymbol: string,
  waypointSymbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConstruction>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetConstructionQueryOptions(
    systemSymbol,
    waypointSymbol,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.

The good must be in your ship's cargo. The good will be removed from your ship's cargo and added to the construction site's materials.
 * @summary Supply Construction Site
 */
export const supplyConstruction = (
  systemSymbol: string,
  waypointSymbol: string,
  supplyConstructionBody: SupplyConstructionBody,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<SupplyConstruction201>(
    {
      url: `/systems/${encodeURIComponent(String(systemSymbol))}/waypoints/${encodeURIComponent(String(waypointSymbol))}/construction/supply`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: supplyConstructionBody,
      signal,
    },
    options,
  );
};

export const getSupplyConstructionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof supplyConstruction>>,
    TError,
    {
      systemSymbol: string;
      waypointSymbol: string;
      data: SupplyConstructionBody;
    },
    TContext
  >;
  request?: SecondParameter<typeof clientInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof supplyConstruction>>,
  TError,
  {
    systemSymbol: string;
    waypointSymbol: string;
    data: SupplyConstructionBody;
  },
  TContext
> => {
  const mutationKey = ["supplyConstruction"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof supplyConstruction>>,
    {
      systemSymbol: string;
      waypointSymbol: string;
      data: SupplyConstructionBody;
    }
  > = (props) => {
    const { systemSymbol, waypointSymbol, data } = props ?? {};

    return supplyConstruction(
      systemSymbol,
      waypointSymbol,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type SupplyConstructionMutationResult = NonNullable<
  Awaited<ReturnType<typeof supplyConstruction>>
>;
export type SupplyConstructionMutationBody = SupplyConstructionBody;
export type SupplyConstructionMutationError = unknown;

/**
 * @summary Supply Construction Site
 */
export const useSupplyConstruction = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof supplyConstruction>>,
      TError,
      {
        systemSymbol: string;
        waypointSymbol: string;
        data: SupplyConstructionBody;
      },
      TContext
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof supplyConstruction>>,
  TError,
  {
    systemSymbol: string;
    waypointSymbol: string;
    data: SupplyConstructionBody;
  },
  TContext
> => {
  const mutationOptions = getSupplyConstructionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
