/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, http } from 'msw';
import type { RequestHandlerOptions } from 'msw';

import type { CreateChart201 } from '../createChart201';

import type { CreateShipShipScan201 } from '../createShipShipScan201';

import type { CreateShipSystemScan201 } from '../createShipSystemScan201';

import type { CreateShipWaypointScan201 } from '../createShipWaypointScan201';

import type { CreateSurvey201 } from '../createSurvey201';

import type { DockShip200 } from '../dockShip200';

import type { ExtractResources201 } from '../extractResources201';

import type { ExtractResourcesWithSurvey201 } from '../extractResourcesWithSurvey201';

import type { GetMounts200 } from '../getMounts200';

import type { GetMyShip200 } from '../getMyShip200';

import type { GetMyShipCargo200 } from '../getMyShipCargo200';

import type { GetMyShips200 } from '../getMyShips200';

import type { GetRepairShip200 } from '../getRepairShip200';

import type { GetScrapShip200 } from '../getScrapShip200';

import type { GetShipCooldown200 } from '../getShipCooldown200';

import type { GetShipModules200 } from '../getShipModules200';

import type { GetShipNav200 } from '../getShipNav200';

import type { InstallMount201 } from '../installMount201';

import type { InstallShipModule201 } from '../installShipModule201';

import type { Jettison200 } from '../jettison200';

import type { JumpShip200 } from '../jumpShip200';

import type { NavigateShip200 } from '../navigateShip200';

import type { NegotiateContract201 } from '../negotiateContract201';

import type { OrbitShip200 } from '../orbitShip200';

import type { PatchShipNav200 } from '../patchShipNav200';

import type { PurchaseCargo201 } from '../purchaseCargo201';

import type { PurchaseShip201 } from '../purchaseShip201';

import type { RefuelShip200 } from '../refuelShip200';

import type { RemoveMount201 } from '../removeMount201';

import type { RemoveShipModule201 } from '../removeShipModule201';

import type { RepairShip200 } from '../repairShip200';

import type { ScrapShip200 } from '../scrapShip200';

import type { SellCargo201 } from '../sellCargo201';

import type { ShipRefine201 } from '../shipRefine201';

import type { SiphonResources201 } from '../siphonResources201';

import type { TransferCargo200 } from '../transferCargo200';

import type { WarpShip200 } from '../warpShip200';
import { Ship } from '../models-Ship/ship';
import { Meta } from '../models-Meta/meta';
import { Agent } from '../models-Agent/agent';
import { ShipyardTransaction } from '../models-ShipyardTransaction/shipyardTransaction';
import { ShipCargo } from '../models-ShipCargo/shipCargo';
import { ShipNav } from '../models-ShipNav/shipNav';
import { Waypoint } from '../models-Waypoint/waypoint';
import { Cooldown } from '../models-Cooldown/cooldown';
import { Survey } from '../models-Survey/survey';
import { ShipFuel } from '../models-ShipFuel/shipFuel';
import { MarketTransaction } from '../models-MarketTransaction/marketTransaction';
import { Contract } from '../models-Contract/contract';
import { ShipConditionEvent } from '../models-ShipConditionEvent/shipConditionEvent';
import { Extraction } from '../models-Extraction/extraction';
import { WaypointModifier } from '../models-WaypointModifier/waypointModifier';
import { Siphon } from '../models-Siphon/siphon';
import { ScannedSystem } from '../models-ScannedSystem/scannedSystem';
import { ScannedWaypoint } from '../models-ScannedWaypoint/scannedWaypoint';
import { ScannedShip } from '../models-ScannedShip/scannedShip';
import { ShipMount } from '../models-ShipMount/shipMount';
import { ShipModule } from '../models-ShipModule/shipModule';

export const getGetMyShipsResponseMock = (
  overrideResponse: Partial<GetMyShips200> = {},
): GetMyShips200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({}) as Ship),
  meta: {} as Meta,
  ...overrideResponse,
});

export const getGetMyShipsResponseMock200 = (
  overrideResponse: Partial<GetMyShips200> = {},
): GetMyShips200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({}) as Ship),
  meta: {} as Meta,
  ...overrideResponse,
});

export const getPurchaseShipResponseMock = (
  overrideResponse: Partial<PurchaseShip201> = {},
): PurchaseShip201 => ({
  data: {
    agent: {} as Agent as Agent,
    ship: {} as Ship,
    transaction: {} as ShipyardTransaction,
  },
  ...overrideResponse,
});

export const getPurchaseShipResponseMock201 = (
  overrideResponse: Partial<PurchaseShip201> = {},
): PurchaseShip201 => ({
  data: {
    agent: {} as Agent as Agent,
    ship: {} as Ship,
    transaction: {} as ShipyardTransaction,
  },
  ...overrideResponse,
});

export const getGetMyShipResponseMock = (
  overrideResponse: Partial<GetMyShip200> = {},
): GetMyShip200 => ({ data: {} as Ship, ...overrideResponse });

export const getGetMyShipResponseMock200 = (
  overrideResponse: Partial<GetMyShip200> = {},
): GetMyShip200 => ({ data: {} as Ship, ...overrideResponse });

export const getGetMyShipCargoResponseMock = (
  overrideResponse: Partial<GetMyShipCargo200> = {},
): GetMyShipCargo200 => ({ data: {} as ShipCargo, ...overrideResponse });

export const getGetMyShipCargoResponseMock200 = (
  overrideResponse: Partial<GetMyShipCargo200> = {},
): GetMyShipCargo200 => ({ data: {} as ShipCargo, ...overrideResponse });

export const getOrbitShipResponseMock = (
  overrideResponse: Partial<OrbitShip200> = {},
): OrbitShip200 => ({
  data: { nav: {} as ShipNav as ShipNav },
  ...overrideResponse,
});

export const getOrbitShipResponseMock200 = (
  overrideResponse: Partial<OrbitShip200> = {},
): OrbitShip200 => ({
  data: { nav: {} as ShipNav as ShipNav },
  ...overrideResponse,
});

export const getShipRefineResponseMock = (
  overrideResponse: Partial<ShipRefine201> = {},
): ShipRefine201 => ({
  data: {
    cargo: {} as ShipCargo as ShipCargo,
    consumed: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      units: faker.number.int({ min: undefined, max: undefined }),
    })),
    cooldown: {} as Cooldown,
    produced: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      units: faker.number.int({ min: undefined, max: undefined }),
    })),
  },
  ...overrideResponse,
});

export const getShipRefineResponseMock201 = (
  overrideResponse: Partial<ShipRefine201> = {},
): ShipRefine201 => ({
  data: {
    cargo: {} as ShipCargo as ShipCargo,
    consumed: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      units: faker.number.int({ min: undefined, max: undefined }),
    })),
    cooldown: {} as Cooldown,
    produced: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      units: faker.number.int({ min: undefined, max: undefined }),
    })),
  },
  ...overrideResponse,
});

export const getCreateChartResponseMock = (
  overrideResponse: Partial<CreateChart201> = {},
): CreateChart201 => ({
  data: { agent: {} as Agent as Agent, chart: {}, waypoint: {} as Waypoint },
  ...overrideResponse,
});

export const getCreateChartResponseMock201 = (
  overrideResponse: Partial<CreateChart201> = {},
): CreateChart201 => ({
  data: { agent: {} as Agent as Agent, chart: {}, waypoint: {} as Waypoint },
  ...overrideResponse,
});

export const getGetShipCooldownResponseMock = (
  overrideResponse: Partial<GetShipCooldown200 | void> = {},
): GetShipCooldown200 | void => ({ data: {} as Cooldown, ...overrideResponse });

export const getGetShipCooldownResponseMock200 = (
  overrideResponse: Partial<GetShipCooldown200> = {},
): GetShipCooldown200 => ({ data: {} as Cooldown, ...overrideResponse });

export const getDockShipResponseMock = (
  overrideResponse: Partial<DockShip200> = {},
): DockShip200 => ({
  data: { nav: {} as ShipNav as ShipNav },
  ...overrideResponse,
});

export const getDockShipResponseMock200 = (
  overrideResponse: Partial<DockShip200> = {},
): DockShip200 => ({
  data: { nav: {} as ShipNav as ShipNav },
  ...overrideResponse,
});

export const getCreateSurveyResponseMock = (
  overrideResponse: Partial<CreateSurvey201> = {},
): CreateSurvey201 => ({
  data: {
    cooldown: {} as Cooldown as Cooldown,
    surveys: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as Survey),
  },
  ...overrideResponse,
});

export const getCreateSurveyResponseMock201 = (
  overrideResponse: Partial<CreateSurvey201> = {},
): CreateSurvey201 => ({
  data: {
    cooldown: {} as Cooldown,
    surveys: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as Survey),
  },
  ...overrideResponse,
});

export const getExtractResourcesResponseMock = (
  overrideResponse: Partial<ExtractResources201> = {},
): ExtractResources201 => ({
  data: {
    cargo: {} as ShipCargo,
    cooldown: {} as Cooldown,
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    extraction: {} as Extraction,
    modifiers: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({}) as WaypointModifier),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getExtractResourcesResponseMock201 = (
  overrideResponse: Partial<ExtractResources201> = {},
): ExtractResources201 => ({
  data: {
    cargo: {} as ShipCargo,
    cooldown: {} as Cooldown,
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    extraction: {} as Extraction,
    modifiers: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({}) as WaypointModifier),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getSiphonResourcesResponseMock = (
  overrideResponse: Partial<SiphonResources201> = {},
): SiphonResources201 => ({
  data: {
    cargo: {} as ShipCargo,
    cooldown: {} as Cooldown,
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    siphon: {} as Siphon,
  },
  ...overrideResponse,
});

export const getSiphonResourcesResponseMock201 = (
  overrideResponse: Partial<SiphonResources201> = {},
): SiphonResources201 => ({
  data: {
    cargo: {} as ShipCargo,
    cooldown: {} as Cooldown,
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    siphon: {} as Siphon,
  },
  ...overrideResponse,
});

export const getExtractResourcesWithSurveyResponseMock = (
  overrideResponse: Partial<ExtractResourcesWithSurvey201> = {},
): ExtractResourcesWithSurvey201 => ({
  data: {
    cargo: {} as ShipCargo,
    cooldown: {} as Cooldown,
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    extraction: {} as Extraction,
  },
  ...overrideResponse,
});

export const getExtractResourcesWithSurveyResponseMock201 = (
  overrideResponse: Partial<ExtractResourcesWithSurvey201> = {},
): ExtractResourcesWithSurvey201 => ({
  data: {
    cargo: {} as ShipCargo,
    cooldown: {} as Cooldown,
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    extraction: {} as Extraction,
  },
  ...overrideResponse,
});

export const getJettisonResponseMock = (
  overrideResponse: Partial<Jettison200> = {},
): Jettison200 => ({ data: { cargo: {} as ShipCargo }, ...overrideResponse });

export const getJettisonResponseMock200 = (
  overrideResponse: Partial<Jettison200> = {},
): Jettison200 => ({ data: { cargo: {} as ShipCargo }, ...overrideResponse });

export const getJumpShipResponseMock = (
  overrideResponse: Partial<JumpShip200> = {},
): JumpShip200 => ({
  data: {
    agent: {} as Agent,
    cooldown: {} as Cooldown,
    nav: {} as ShipNav,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getJumpShipResponseMock200 = (
  overrideResponse: Partial<JumpShip200> = {},
): JumpShip200 => ({
  data: {
    agent: {} as Agent,
    cooldown: {} as Cooldown,
    nav: {} as ShipNav,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getNavigateShipResponseMock = (
  overrideResponse: Partial<NavigateShip200> = {},
): NavigateShip200 => ({
  data: {
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    fuel: {} as ShipFuel,
    nav: {} as ShipNav,
  },
  ...overrideResponse,
});

export const getNavigateShipResponseMock200 = (
  overrideResponse: Partial<NavigateShip200> = {},
): NavigateShip200 => ({
  data: {
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    fuel: {} as ShipFuel,
    nav: {} as ShipNav,
  },
  ...overrideResponse,
});

export const getPatchShipNavResponseMock = (
  overrideResponse: Partial<PatchShipNav200> = {},
): PatchShipNav200 => ({
  data: {
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    fuel: {} as ShipFuel,
    nav: {} as ShipNav,
  },
  ...overrideResponse,
});

export const getPatchShipNavResponseMock200 = (
  overrideResponse: Partial<PatchShipNav200> = {},
): PatchShipNav200 => ({
  data: {
    events: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipConditionEvent),
    fuel: {} as ShipFuel,
    nav: {} as ShipNav,
  },
  ...overrideResponse,
});

export const getGetShipNavResponseMock = (
  overrideResponse: Partial<GetShipNav200> = {},
): GetShipNav200 => ({ data: {} as ShipNav, ...overrideResponse });

export const getGetShipNavResponseMock200 = (
  overrideResponse: Partial<GetShipNav200> = {},
): GetShipNav200 => ({ data: {} as ShipNav, ...overrideResponse });

export const getWarpShipResponseMock = (
  overrideResponse: Partial<WarpShip200> = {},
): WarpShip200 => ({
  data: { fuel: {} as ShipFuel as ShipFuel, nav: {} as ShipNav as ShipNav },
  ...overrideResponse,
});

export const getWarpShipResponseMock200 = (
  overrideResponse: Partial<WarpShip200> = {},
): WarpShip200 => ({
  data: { fuel: {} as ShipFuel as ShipFuel, nav: {} as ShipNav as ShipNav },
  ...overrideResponse,
});

export const getSellCargoResponseMock = (
  overrideResponse: Partial<SellCargo201> = {},
): SellCargo201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    transaction: {} as MarketTransaction as MarketTransaction,
  },
  ...overrideResponse,
});

export const getSellCargoResponseMock201 = (
  overrideResponse: Partial<SellCargo201> = {},
): SellCargo201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    transaction: {} as MarketTransaction as MarketTransaction,
  },
  ...overrideResponse,
});

export const getCreateShipSystemScanResponseMock = (
  overrideResponse: Partial<CreateShipSystemScan201> = {},
): CreateShipSystemScan201 => ({
  data: {
    cooldown: {} as Cooldown,
    systems: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ScannedSystem),
  },
  ...overrideResponse,
});

export const getCreateShipSystemScanResponseMock201 = (
  overrideResponse: Partial<CreateShipSystemScan201> = {},
): CreateShipSystemScan201 => ({
  data: {
    cooldown: {} as Cooldown,
    systems: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ScannedSystem),
  },
  ...overrideResponse,
});

export const getCreateShipWaypointScanResponseMock = (
  overrideResponse: Partial<CreateShipWaypointScan201> = {},
): CreateShipWaypointScan201 => ({
  data: {
    cooldown: {} as Cooldown,
    waypoints: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ScannedWaypoint),
  },
  ...overrideResponse,
});

export const getCreateShipWaypointScanResponseMock201 = (
  overrideResponse: Partial<CreateShipWaypointScan201> = {},
): CreateShipWaypointScan201 => ({
  data: {
    cooldown: {} as Cooldown,
    waypoints: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ScannedWaypoint),
  },
  ...overrideResponse,
});

export const getCreateShipShipScanResponseMock = (
  overrideResponse: Partial<CreateShipShipScan201> = {},
): CreateShipShipScan201 => ({
  data: {
    cooldown: {} as Cooldown,
    ships: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ScannedShip),
  },
  ...overrideResponse,
});

export const getCreateShipShipScanResponseMock201 = (
  overrideResponse: Partial<CreateShipShipScan201> = {},
): CreateShipShipScan201 => ({
  data: {
    cooldown: {} as Cooldown,
    ships: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ScannedShip),
  },
  ...overrideResponse,
});

export const getRefuelShipResponseMock = (
  overrideResponse: Partial<RefuelShip200> = {},
): RefuelShip200 => ({
  data: {
    agent: {} as Agent,
    cargo: faker.helpers.arrayElement([{} as ShipCargo, undefined]),
    fuel: {} as ShipFuel,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getRefuelShipResponseMock200 = (
  overrideResponse: Partial<RefuelShip200> = {},
): RefuelShip200 => ({
  data: {
    agent: {} as Agent,
    cargo: faker.helpers.arrayElement([{} as ShipCargo, undefined]),
    fuel: {} as ShipFuel,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getPurchaseCargoResponseMock = (
  overrideResponse: Partial<PurchaseCargo201> = {},
): PurchaseCargo201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getPurchaseCargoResponseMock201 = (
  overrideResponse: Partial<PurchaseCargo201> = {},
): PurchaseCargo201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getTransferCargoResponseMock = (
  overrideResponse: Partial<TransferCargo200> = {},
): TransferCargo200 => ({
  data: { cargo: {} as ShipCargo },
  ...overrideResponse,
});

export const getTransferCargoResponseMock200 = (
  overrideResponse: Partial<TransferCargo200> = {},
): TransferCargo200 => ({
  data: { cargo: {} as ShipCargo },
  ...overrideResponse,
});

export const getNegotiateContractResponseMock = (
  overrideResponse: Partial<NegotiateContract201> = {},
): NegotiateContract201 => ({
  data: { contract: {} as Contract },
  ...overrideResponse,
});

export const getNegotiateContractResponseMock201 = (
  overrideResponse: Partial<NegotiateContract201> = {},
): NegotiateContract201 => ({
  data: { contract: {} as Contract },
  ...overrideResponse,
});

export const getGetMountsResponseMock = (
  overrideResponse: Partial<GetMounts200> = {},
): GetMounts200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({}) as ShipMount),
  ...overrideResponse,
});

export const getGetMountsResponseMock200 = (
  overrideResponse: Partial<GetMounts200> = {},
): GetMounts200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({}) as ShipMount),
  ...overrideResponse,
});

export const getInstallMountResponseMock = (
  overrideResponse: Partial<InstallMount201> = {},
): InstallMount201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    mounts: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipMount),
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getInstallMountResponseMock201 = (
  overrideResponse: Partial<InstallMount201> = {},
): InstallMount201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    mounts: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipMount),
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getRemoveMountResponseMock = (
  overrideResponse: Partial<RemoveMount201> = {},
): RemoveMount201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    mounts: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipMount),
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getRemoveMountResponseMock201 = (
  overrideResponse: Partial<RemoveMount201> = {},
): RemoveMount201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    mounts: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipMount),
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getGetScrapShipResponseMock = (
  overrideResponse: Partial<GetScrapShip200> = {},
): GetScrapShip200 => ({
  data: { transaction: {} as MarketTransaction },
  ...overrideResponse,
});

export const getGetScrapShipResponseMock200 = (
  overrideResponse: Partial<GetScrapShip200> = {},
): GetScrapShip200 => ({
  data: { transaction: {} as MarketTransaction },
  ...overrideResponse,
});

export const getScrapShipResponseMock = (
  overrideResponse: Partial<ScrapShip200> = {},
): ScrapShip200 => ({
  data: { agent: {} as Agent, transaction: {} as MarketTransaction },
  ...overrideResponse,
});

export const getScrapShipResponseMock200 = (
  overrideResponse: Partial<ScrapShip200> = {},
): ScrapShip200 => ({
  data: { agent: {} as Agent, transaction: {} as MarketTransaction },
  ...overrideResponse,
});

export const getGetRepairShipResponseMock = (
  overrideResponse: Partial<GetRepairShip200> = {},
): GetRepairShip200 => ({
  data: { transaction: {} as MarketTransaction },
  ...overrideResponse,
});

export const getGetRepairShipResponseMock200 = (
  overrideResponse: Partial<GetRepairShip200> = {},
): GetRepairShip200 => ({
  data: { transaction: {} as MarketTransaction },
  ...overrideResponse,
});

export const getRepairShipResponseMock = (
  overrideResponse: Partial<RepairShip200> = {},
): RepairShip200 => ({
  data: {
    agent: {} as Agent,
    ship: {} as Ship,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getRepairShipResponseMock200 = (
  overrideResponse: Partial<RepairShip200> = {},
): RepairShip200 => ({
  data: {
    agent: {} as Agent,
    ship: {} as Ship,
    transaction: {} as MarketTransaction,
  },
  ...overrideResponse,
});

export const getGetShipModulesResponseMock = (
  overrideResponse: Partial<GetShipModules200> = {},
): GetShipModules200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({}) as ShipModule),
  ...overrideResponse,
});

export const getGetShipModulesResponseMock200 = (
  overrideResponse: Partial<GetShipModules200> = {},
): GetShipModules200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({}) as ShipModule),
  ...overrideResponse,
});

export const getInstallShipModuleResponseMock = (
  overrideResponse: Partial<InstallShipModule201> = {},
): InstallShipModule201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    modules: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipModule),
    transaction: {
      shipSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      timestamp: faker.string.alpha({ length: { min: 10, max: 20 } }),
      totalPrice: faker.number.int({ min: undefined, max: undefined }),
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      waypointSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
  },
  ...overrideResponse,
});

export const getInstallShipModuleResponseMock201 = (
  overrideResponse: Partial<InstallShipModule201> = {},
): InstallShipModule201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    modules: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipModule),
    transaction: {
      shipSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      timestamp: faker.string.alpha({ length: { min: 10, max: 20 } }),
      totalPrice: faker.number.int({ min: undefined, max: undefined }),
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      waypointSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
  },
  ...overrideResponse,
});

export const getRemoveShipModuleResponseMock = (
  overrideResponse: Partial<RemoveShipModule201> = {},
): RemoveShipModule201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    modules: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipModule),
    transaction: {
      shipSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      timestamp: faker.string.alpha({ length: { min: 10, max: 20 } }),
      totalPrice: faker.number.int({ min: undefined, max: undefined }),
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      waypointSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
  },
  ...overrideResponse,
});

export const getRemoveShipModuleResponseMock201 = (
  overrideResponse: Partial<RemoveShipModule201> = {},
): RemoveShipModule201 => ({
  data: {
    agent: {} as Agent,
    cargo: {} as ShipCargo,
    modules: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}) as ShipModule),
    transaction: {
      shipSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      timestamp: faker.string.alpha({ length: { min: 10, max: 20 } }),
      totalPrice: faker.number.int({ min: undefined, max: undefined }),
      tradeSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      waypointSymbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
  },
  ...overrideResponse,
});

export const getGetMyShipsMockHandler = (
  overrideResponse?:
    | GetMyShips200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMyShips200> | GetMyShips200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyShipsResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMyShipsMockHandler200 = (
  overrideResponse?:
    | GetMyShips200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMyShips200> | GetMyShips200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyShipsResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPurchaseShipMockHandler = (
  overrideResponse?:
    | PurchaseShip201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PurchaseShip201> | PurchaseShip201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPurchaseShipResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPurchaseShipMockHandler201 = (
  overrideResponse?:
    | PurchaseShip201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PurchaseShip201> | PurchaseShip201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPurchaseShipResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMyShipMockHandler = (
  overrideResponse?:
    | GetMyShip200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMyShip200> | GetMyShip200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMyShipMockHandler200 = (
  overrideResponse?:
    | GetMyShip200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMyShip200> | GetMyShip200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMyShipCargoMockHandler = (
  overrideResponse?:
    | GetMyShipCargo200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMyShipCargo200> | GetMyShipCargo200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/cargo',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyShipCargoResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMyShipCargoMockHandler200 = (
  overrideResponse?:
    | GetMyShipCargo200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMyShipCargo200> | GetMyShipCargo200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/cargo',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyShipCargoResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getOrbitShipMockHandler = (
  overrideResponse?:
    | OrbitShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<OrbitShip200> | OrbitShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/orbit',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getOrbitShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getOrbitShipMockHandler200 = (
  overrideResponse?:
    | OrbitShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<OrbitShip200> | OrbitShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/orbit',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getOrbitShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getShipRefineMockHandler = (
  overrideResponse?:
    | ShipRefine201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ShipRefine201> | ShipRefine201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/refine',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getShipRefineResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getShipRefineMockHandler201 = (
  overrideResponse?:
    | ShipRefine201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ShipRefine201> | ShipRefine201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/refine',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getShipRefineResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateChartMockHandler = (
  overrideResponse?:
    | CreateChart201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateChart201> | CreateChart201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/chart',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateChartResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateChartMockHandler201 = (
  overrideResponse?:
    | CreateChart201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateChart201> | CreateChart201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/chart',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateChartResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetShipCooldownMockHandler = (
  overrideResponse?:
    | GetShipCooldown200
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetShipCooldown200 | void> | GetShipCooldown200 | void),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/cooldown',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetShipCooldownResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetShipCooldownMockHandler200 = (
  overrideResponse?:
    | GetShipCooldown200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetShipCooldown200> | GetShipCooldown200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/cooldown',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetShipCooldownResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetShipCooldownMockHandler204 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/cooldown',
    async (info) => {
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getDockShipMockHandler = (
  overrideResponse?:
    | DockShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<DockShip200> | DockShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/dock',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getDockShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDockShipMockHandler200 = (
  overrideResponse?:
    | DockShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<DockShip200> | DockShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/dock',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getDockShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateSurveyMockHandler = (
  overrideResponse?:
    | CreateSurvey201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateSurvey201> | CreateSurvey201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/survey',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateSurveyResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateSurveyMockHandler201 = (
  overrideResponse?:
    | CreateSurvey201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateSurvey201> | CreateSurvey201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/survey',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateSurveyResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getExtractResourcesMockHandler = (
  overrideResponse?:
    | ExtractResources201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExtractResources201> | ExtractResources201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/extract',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getExtractResourcesResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getExtractResourcesMockHandler201 = (
  overrideResponse?:
    | ExtractResources201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExtractResources201> | ExtractResources201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/extract',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getExtractResourcesResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getSiphonResourcesMockHandler = (
  overrideResponse?:
    | SiphonResources201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SiphonResources201> | SiphonResources201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/siphon',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSiphonResourcesResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getSiphonResourcesMockHandler201 = (
  overrideResponse?:
    | SiphonResources201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SiphonResources201> | SiphonResources201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/siphon',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSiphonResourcesResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getExtractResourcesWithSurveyMockHandler = (
  overrideResponse?:
    | ExtractResourcesWithSurvey201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ExtractResourcesWithSurvey201>
        | ExtractResourcesWithSurvey201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/extract/survey',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getExtractResourcesWithSurveyResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getExtractResourcesWithSurveyMockHandler201 = (
  overrideResponse?:
    | ExtractResourcesWithSurvey201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ExtractResourcesWithSurvey201>
        | ExtractResourcesWithSurvey201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/extract/survey',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getExtractResourcesWithSurveyResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getJettisonMockHandler = (
  overrideResponse?:
    | Jettison200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Jettison200> | Jettison200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/jettison',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getJettisonResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getJettisonMockHandler200 = (
  overrideResponse?:
    | Jettison200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Jettison200> | Jettison200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/jettison',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getJettisonResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getJumpShipMockHandler = (
  overrideResponse?:
    | JumpShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<JumpShip200> | JumpShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/jump',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getJumpShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getJumpShipMockHandler200 = (
  overrideResponse?:
    | JumpShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<JumpShip200> | JumpShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/jump',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getJumpShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getNavigateShipMockHandler = (
  overrideResponse?:
    | NavigateShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NavigateShip200> | NavigateShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/navigate',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getNavigateShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getNavigateShipMockHandler200 = (
  overrideResponse?:
    | NavigateShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NavigateShip200> | NavigateShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/navigate',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getNavigateShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPatchShipNavMockHandler = (
  overrideResponse?:
    | PatchShipNav200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<PatchShipNav200> | PatchShipNav200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/my/ships/:shipSymbol/nav',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPatchShipNavResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPatchShipNavMockHandler200 = (
  overrideResponse?:
    | PatchShipNav200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<PatchShipNav200> | PatchShipNav200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/my/ships/:shipSymbol/nav',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPatchShipNavResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetShipNavMockHandler = (
  overrideResponse?:
    | GetShipNav200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetShipNav200> | GetShipNav200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/nav',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetShipNavResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetShipNavMockHandler200 = (
  overrideResponse?:
    | GetShipNav200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetShipNav200> | GetShipNav200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/nav',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetShipNavResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getWarpShipMockHandler = (
  overrideResponse?:
    | WarpShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WarpShip200> | WarpShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/warp',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getWarpShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getWarpShipMockHandler200 = (
  overrideResponse?:
    | WarpShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WarpShip200> | WarpShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/warp',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getWarpShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getSellCargoMockHandler = (
  overrideResponse?:
    | SellCargo201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SellCargo201> | SellCargo201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/sell',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSellCargoResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getSellCargoMockHandler201 = (
  overrideResponse?:
    | SellCargo201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SellCargo201> | SellCargo201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/sell',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSellCargoResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateShipSystemScanMockHandler = (
  overrideResponse?:
    | CreateShipSystemScan201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateShipSystemScan201> | CreateShipSystemScan201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scan/systems',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateShipSystemScanResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateShipSystemScanMockHandler201 = (
  overrideResponse?:
    | CreateShipSystemScan201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateShipSystemScan201> | CreateShipSystemScan201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scan/systems',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateShipSystemScanResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateShipWaypointScanMockHandler = (
  overrideResponse?:
    | CreateShipWaypointScan201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateShipWaypointScan201> | CreateShipWaypointScan201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scan/waypoints',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateShipWaypointScanResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateShipWaypointScanMockHandler201 = (
  overrideResponse?:
    | CreateShipWaypointScan201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateShipWaypointScan201> | CreateShipWaypointScan201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scan/waypoints',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateShipWaypointScanResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateShipShipScanMockHandler = (
  overrideResponse?:
    | CreateShipShipScan201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateShipShipScan201> | CreateShipShipScan201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scan/ships',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateShipShipScanResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreateShipShipScanMockHandler201 = (
  overrideResponse?:
    | CreateShipShipScan201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateShipShipScan201> | CreateShipShipScan201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scan/ships',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateShipShipScanResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRefuelShipMockHandler = (
  overrideResponse?:
    | RefuelShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RefuelShip200> | RefuelShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/refuel',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRefuelShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRefuelShipMockHandler200 = (
  overrideResponse?:
    | RefuelShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RefuelShip200> | RefuelShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/refuel',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRefuelShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPurchaseCargoMockHandler = (
  overrideResponse?:
    | PurchaseCargo201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PurchaseCargo201> | PurchaseCargo201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/purchase',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPurchaseCargoResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPurchaseCargoMockHandler201 = (
  overrideResponse?:
    | PurchaseCargo201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PurchaseCargo201> | PurchaseCargo201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/purchase',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPurchaseCargoResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getTransferCargoMockHandler = (
  overrideResponse?:
    | TransferCargo200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TransferCargo200> | TransferCargo200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/transfer',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getTransferCargoResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getTransferCargoMockHandler200 = (
  overrideResponse?:
    | TransferCargo200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TransferCargo200> | TransferCargo200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/transfer',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getTransferCargoResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getNegotiateContractMockHandler = (
  overrideResponse?:
    | NegotiateContract201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NegotiateContract201> | NegotiateContract201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/negotiate/contract',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getNegotiateContractResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getNegotiateContractMockHandler201 = (
  overrideResponse?:
    | NegotiateContract201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NegotiateContract201> | NegotiateContract201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/negotiate/contract',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getNegotiateContractResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMountsMockHandler = (
  overrideResponse?:
    | GetMounts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMounts200> | GetMounts200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/mounts',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMountsResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMountsMockHandler200 = (
  overrideResponse?:
    | GetMounts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMounts200> | GetMounts200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/mounts',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMountsResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getInstallMountMockHandler = (
  overrideResponse?:
    | InstallMount201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<InstallMount201> | InstallMount201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/mounts/install',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getInstallMountResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getInstallMountMockHandler201 = (
  overrideResponse?:
    | InstallMount201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<InstallMount201> | InstallMount201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/mounts/install',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getInstallMountResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRemoveMountMockHandler = (
  overrideResponse?:
    | RemoveMount201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RemoveMount201> | RemoveMount201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/mounts/remove',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRemoveMountResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRemoveMountMockHandler201 = (
  overrideResponse?:
    | RemoveMount201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RemoveMount201> | RemoveMount201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/mounts/remove',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRemoveMountResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetScrapShipMockHandler = (
  overrideResponse?:
    | GetScrapShip200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetScrapShip200> | GetScrapShip200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/scrap',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetScrapShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetScrapShipMockHandler200 = (
  overrideResponse?:
    | GetScrapShip200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetScrapShip200> | GetScrapShip200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/scrap',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetScrapShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getScrapShipMockHandler = (
  overrideResponse?:
    | ScrapShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ScrapShip200> | ScrapShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scrap',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getScrapShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getScrapShipMockHandler200 = (
  overrideResponse?:
    | ScrapShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ScrapShip200> | ScrapShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/scrap',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getScrapShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetRepairShipMockHandler = (
  overrideResponse?:
    | GetRepairShip200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetRepairShip200> | GetRepairShip200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/repair',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetRepairShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetRepairShipMockHandler200 = (
  overrideResponse?:
    | GetRepairShip200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetRepairShip200> | GetRepairShip200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/repair',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetRepairShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRepairShipMockHandler = (
  overrideResponse?:
    | RepairShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RepairShip200> | RepairShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/repair',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRepairShipResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRepairShipMockHandler200 = (
  overrideResponse?:
    | RepairShip200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RepairShip200> | RepairShip200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/repair',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRepairShipResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetShipModulesMockHandler = (
  overrideResponse?:
    | GetShipModules200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetShipModules200> | GetShipModules200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/modules',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetShipModulesResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetShipModulesMockHandler200 = (
  overrideResponse?:
    | GetShipModules200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetShipModules200> | GetShipModules200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/my/ships/:shipSymbol/modules',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetShipModulesResponseMock200(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getInstallShipModuleMockHandler = (
  overrideResponse?:
    | InstallShipModule201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<InstallShipModule201> | InstallShipModule201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/modules/install',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getInstallShipModuleResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getInstallShipModuleMockHandler201 = (
  overrideResponse?:
    | InstallShipModule201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<InstallShipModule201> | InstallShipModule201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/modules/install',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getInstallShipModuleResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRemoveShipModuleMockHandler = (
  overrideResponse?:
    | RemoveShipModule201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RemoveShipModule201> | RemoveShipModule201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/modules/remove',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRemoveShipModuleResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRemoveShipModuleMockHandler201 = (
  overrideResponse?:
    | RemoveShipModule201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RemoveShipModule201> | RemoveShipModule201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/my/ships/:shipSymbol/modules/remove',
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRemoveShipModuleResponseMock201(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getFleetMock = () => [
  getGetMyShipsMockHandler(),
  getPurchaseShipMockHandler(),
  getGetMyShipMockHandler(),
  getGetMyShipCargoMockHandler(),
  getOrbitShipMockHandler(),
  getShipRefineMockHandler(),
  getCreateChartMockHandler(),
  getGetShipCooldownMockHandler(),
  getDockShipMockHandler(),
  getCreateSurveyMockHandler(),
  getExtractResourcesMockHandler(),
  getSiphonResourcesMockHandler(),
  getExtractResourcesWithSurveyMockHandler(),
  getJettisonMockHandler(),
  getJumpShipMockHandler(),
  getNavigateShipMockHandler(),
  getPatchShipNavMockHandler(),
  getGetShipNavMockHandler(),
  getWarpShipMockHandler(),
  getSellCargoMockHandler(),
  getCreateShipSystemScanMockHandler(),
  getCreateShipWaypointScanMockHandler(),
  getCreateShipShipScanMockHandler(),
  getRefuelShipMockHandler(),
  getPurchaseCargoMockHandler(),
  getTransferCargoMockHandler(),
  getNegotiateContractMockHandler(),
  getGetMountsMockHandler(),
  getInstallMountMockHandler(),
  getRemoveMountMockHandler(),
  getGetScrapShipMockHandler(),
  getScrapShipMockHandler(),
  getGetRepairShipMockHandler(),
  getRepairShipMockHandler(),
  getGetShipModulesMockHandler(),
  getInstallShipModuleMockHandler(),
  getRemoveShipModuleMockHandler(),
];
