/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  http
} from 'msw';
import type {
  RequestHandlerOptions
} from 'msw';

import type {
  GetSupplyChain200
} from '../getSupplyChain200';


export const getGetSupplyChainResponseMock = (overrideResponse: Partial< GetSupplyChain200 > = {}): GetSupplyChain200 => ({data: {exportToImportMap: {
        [faker.string.alphanumeric(5)]: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))
      }}, ...overrideResponse})


export const getGetSupplyChainResponseMock200 = (overrideResponse: Partial< GetSupplyChain200 > = {}): GetSupplyChain200 => ({data: {exportToImportMap: {
        [faker.string.alphanumeric(5)]: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))
      }}, ...overrideResponse})


export const getGetSupplyChainMockHandler = (overrideResponse?: GetSupplyChain200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetSupplyChain200> | GetSupplyChain200), options?: RequestHandlerOptions) => {
  return http.get('*/market/supply-chain', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetSupplyChainResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getGetSupplyChainMockHandler200 = (overrideResponse?: GetSupplyChain200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetSupplyChain200> | GetSupplyChain200), options?: RequestHandlerOptions) => {
  return http.get('*/market/supply-chain', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetSupplyChainResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}
export const getDataMock = () => [
  getGetSupplyChainMockHandler()
]
