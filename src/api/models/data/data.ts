/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetSupplyChain200
} from '../getSupplyChain200';

import { clientInstance } from '../../client';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Describes which import and exports map to each other.
 * @summary Get Supply Chain
 */
export const getSupplyChain = (
    
 options?: SecondParameter<typeof clientInstance>,signal?: AbortSignal
) => {
      
      
      return clientInstance<GetSupplyChain200>(
      {url: `/market/supply-chain`, method: 'GET', signal
    },
      options);
    }
  



export const getGetSupplyChainQueryKey = () => {
    return [
    `/market/supply-chain`
    ] as const;
    }

    
export const getGetSupplyChainQueryOptions = <TData = Awaited<ReturnType<typeof getSupplyChain>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupplyChain>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupplyChainQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupplyChain>>> = ({ signal }) => getSupplyChain(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupplyChain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSupplyChainQueryResult = NonNullable<Awaited<ReturnType<typeof getSupplyChain>>>
export type GetSupplyChainQueryError = unknown


export function useGetSupplyChain<TData = Awaited<ReturnType<typeof getSupplyChain>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupplyChain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupplyChain>>,
          TError,
          Awaited<ReturnType<typeof getSupplyChain>>
        > , 'initialData'
      >, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupplyChain<TData = Awaited<ReturnType<typeof getSupplyChain>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupplyChain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupplyChain>>,
          TError,
          Awaited<ReturnType<typeof getSupplyChain>>
        > , 'initialData'
      >, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupplyChain<TData = Awaited<ReturnType<typeof getSupplyChain>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupplyChain>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Supply Chain
 */

export function useGetSupplyChain<TData = Awaited<ReturnType<typeof getSupplyChain>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupplyChain>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSupplyChainQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




