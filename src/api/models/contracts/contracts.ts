/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { AcceptContract200 } from '../acceptContract200';

import type { DeliverContract200 } from '../deliverContract200';

import type { DeliverContractBody } from '../deliverContractBody';

import type { FulfillContract200 } from '../fulfillContract200';

import type { GetContract200 } from '../getContract200';

import type { GetContracts200 } from '../getContracts200';

import type { GetContractsParams } from '../getContractsParams';

import { clientInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Return a paginated list of all your contracts.
 * @summary List Contracts
 */
export const getContracts = (
  params?: GetContractsParams,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetContracts200>(
    { url: `/my/contracts`, method: 'GET', params, signal },
    options,
  );
};

export const getGetContractsQueryKey = (params?: GetContractsParams) => {
  return [`/my/contracts`, ...(params ? [params] : [])] as const;
};

export const getGetContractsQueryOptions = <
  TData = Awaited<ReturnType<typeof getContracts>>,
  TError = unknown,
>(
  params?: GetContractsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContracts>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContractsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContracts>>> = ({
    signal,
  }) => getContracts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getContracts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetContractsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContracts>>
>;
export type GetContractsQueryError = unknown;

export function useGetContracts<
  TData = Awaited<ReturnType<typeof getContracts>>,
  TError = unknown,
>(
  params: undefined | GetContractsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContracts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContracts>>,
          TError,
          Awaited<ReturnType<typeof getContracts>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContracts<
  TData = Awaited<ReturnType<typeof getContracts>>,
  TError = unknown,
>(
  params?: GetContractsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContracts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContracts>>,
          TError,
          Awaited<ReturnType<typeof getContracts>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContracts<
  TData = Awaited<ReturnType<typeof getContracts>>,
  TError = unknown,
>(
  params?: GetContractsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContracts>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Contracts
 */

export function useGetContracts<
  TData = Awaited<ReturnType<typeof getContracts>>,
  TError = unknown,
>(
  params?: GetContractsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContracts>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetContractsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the details of a contract by ID.
 * @summary Get Contract
 */
export const getContract = (
  contractId: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetContract200>(
    {
      url: `/my/contracts/${encodeURIComponent(String(contractId))}`,
      method: 'GET',
      signal,
    },
    options,
  );
};

export const getGetContractQueryKey = (contractId?: string) => {
  return [`/my/contracts/${contractId}`] as const;
};

export const getGetContractQueryOptions = <
  TData = Awaited<ReturnType<typeof getContract>>,
  TError = unknown,
>(
  contractId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContractQueryKey(contractId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContract>>> = ({
    signal,
  }) => getContract(contractId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!contractId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getContract>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetContractQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContract>>
>;
export type GetContractQueryError = unknown;

export function useGetContract<
  TData = Awaited<ReturnType<typeof getContract>>,
  TError = unknown,
>(
  contractId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContract>>,
          TError,
          Awaited<ReturnType<typeof getContract>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContract<
  TData = Awaited<ReturnType<typeof getContract>>,
  TError = unknown,
>(
  contractId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContract>>,
          TError,
          Awaited<ReturnType<typeof getContract>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContract<
  TData = Awaited<ReturnType<typeof getContract>>,
  TError = unknown,
>(
  contractId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Contract
 */

export function useGetContract<
  TData = Awaited<ReturnType<typeof getContract>>,
  TError = unknown,
>(
  contractId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetContractQueryOptions(contractId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Accept a contract by ID. 

You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
 * @summary Accept Contract
 */
export const acceptContract = (
  contractId: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<AcceptContract200>(
    {
      url: `/my/contracts/${encodeURIComponent(String(contractId))}/accept`,
      method: 'POST',
      signal,
    },
    options,
  );
};

export const getAcceptContractMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptContract>>,
    TError,
    { contractId: string },
    TContext
  >;
  request?: SecondParameter<typeof clientInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptContract>>,
  TError,
  { contractId: string },
  TContext
> => {
  const mutationKey = ['acceptContract'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptContract>>,
    { contractId: string }
  > = (props) => {
    const { contractId } = props ?? {};

    return acceptContract(contractId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AcceptContractMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptContract>>
>;

export type AcceptContractMutationError = unknown;

/**
 * @summary Accept Contract
 */
export const useAcceptContract = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptContract>>,
      TError,
      { contractId: string },
      TContext
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof acceptContract>>,
  TError,
  { contractId: string },
  TContext
> => {
  const mutationOptions = getAcceptContractMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Deliver cargo to a contract.

In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.

Cargo that was delivered will be removed from the ship's cargo.
 * @summary Deliver Cargo to Contract
 */
export const deliverContract = (
  contractId: string,
  deliverContractBody: DeliverContractBody,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<DeliverContract200>(
    {
      url: `/my/contracts/${encodeURIComponent(String(contractId))}/deliver`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: deliverContractBody,
      signal,
    },
    options,
  );
};

export const getDeliverContractMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deliverContract>>,
    TError,
    { contractId: string; data: DeliverContractBody },
    TContext
  >;
  request?: SecondParameter<typeof clientInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deliverContract>>,
  TError,
  { contractId: string; data: DeliverContractBody },
  TContext
> => {
  const mutationKey = ['deliverContract'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deliverContract>>,
    { contractId: string; data: DeliverContractBody }
  > = (props) => {
    const { contractId, data } = props ?? {};

    return deliverContract(contractId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeliverContractMutationResult = NonNullable<
  Awaited<ReturnType<typeof deliverContract>>
>;
export type DeliverContractMutationBody = DeliverContractBody;
export type DeliverContractMutationError = unknown;

/**
 * @summary Deliver Cargo to Contract
 */
export const useDeliverContract = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deliverContract>>,
      TError,
      { contractId: string; data: DeliverContractBody },
      TContext
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deliverContract>>,
  TError,
  { contractId: string; data: DeliverContractBody },
  TContext
> => {
  const mutationOptions = getDeliverContractMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
 * @summary Fulfill Contract
 */
export const fulfillContract = (
  contractId: string,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<FulfillContract200>(
    {
      url: `/my/contracts/${encodeURIComponent(String(contractId))}/fulfill`,
      method: 'POST',
      signal,
    },
    options,
  );
};

export const getFulfillContractMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fulfillContract>>,
    TError,
    { contractId: string },
    TContext
  >;
  request?: SecondParameter<typeof clientInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof fulfillContract>>,
  TError,
  { contractId: string },
  TContext
> => {
  const mutationKey = ['fulfillContract'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fulfillContract>>,
    { contractId: string }
  > = (props) => {
    const { contractId } = props ?? {};

    return fulfillContract(contractId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FulfillContractMutationResult = NonNullable<
  Awaited<ReturnType<typeof fulfillContract>>
>;

export type FulfillContractMutationError = unknown;

/**
 * @summary Fulfill Contract
 */
export const useFulfillContract = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof fulfillContract>>,
      TError,
      { contractId: string },
      TContext
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof fulfillContract>>,
  TError,
  { contractId: string },
  TContext
> => {
  const mutationOptions = getFulfillContractMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
