/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  http
} from 'msw';
import type {
  RequestHandlerOptions
} from 'msw';

import type {
  AcceptContract200
} from '../acceptContract200';

import type {
  DeliverContract200
} from '../deliverContract200';

import type {
  FulfillContract200
} from '../fulfillContract200';

import type {
  GetContract200
} from '../getContract200';

import type {
  GetContracts200
} from '../getContracts200';
import { Contract } from '../models-Contract/contract';
import { Meta } from '../models-Meta/meta';
import { Agent } from '../models-Agent/agent';
import { ShipCargo } from '../models-ShipCargo/shipCargo';


export const getGetContractsResponseMock = (overrideResponse: Partial< GetContracts200 > = {}): GetContracts200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({} as Contract)), meta: {} as Meta, ...overrideResponse})


export const getGetContractsResponseMock200 = (overrideResponse: Partial< GetContracts200 > = {}): GetContracts200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({} as Contract)), meta: {} as Meta, ...overrideResponse})

export const getGetContractResponseMock = (overrideResponse: Partial< GetContract200 > = {}): GetContract200 => ({data: {} as Contract, ...overrideResponse})


export const getGetContractResponseMock200 = (overrideResponse: Partial< GetContract200 > = {}): GetContract200 => ({data: {} as Contract, ...overrideResponse})

export const getAcceptContractResponseMock = (overrideResponse: Partial< AcceptContract200 > = {}): AcceptContract200 => ({data: {agent: {} as Agent, contract: {} as Contract}, ...overrideResponse})


export const getAcceptContractResponseMock200 = (overrideResponse: Partial< AcceptContract200 > = {}): AcceptContract200 => ({data: {agent: {} as Agent, contract: {} as Contract}, ...overrideResponse})

export const getDeliverContractResponseMock = (overrideResponse: Partial< DeliverContract200 > = {}): DeliverContract200 => ({data: {cargo: {} as ShipCargo, contract: {} as Contract}, ...overrideResponse})


export const getDeliverContractResponseMock200 = (overrideResponse: Partial< DeliverContract200 > = {}): DeliverContract200 => ({data: {cargo: {} as ShipCargo, contract: {} as Contract}, ...overrideResponse})

export const getFulfillContractResponseMock = (overrideResponse: Partial< FulfillContract200 > = {}): FulfillContract200 => ({data: {agent: {} as Agent, contract: {} as Contract}, ...overrideResponse})


export const getFulfillContractResponseMock200 = (overrideResponse: Partial< FulfillContract200 > = {}): FulfillContract200 => ({data: {agent: {} as Agent, contract: {} as Contract}, ...overrideResponse})


export const getGetContractsMockHandler = (overrideResponse?: GetContracts200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetContracts200> | GetContracts200), options?: RequestHandlerOptions) => {
  return http.get('*/my/contracts', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetContractsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getGetContractsMockHandler200 = (overrideResponse?: GetContracts200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetContracts200> | GetContracts200), options?: RequestHandlerOptions) => {
  return http.get('*/my/contracts', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetContractsResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}

export const getGetContractMockHandler = (overrideResponse?: GetContract200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetContract200> | GetContract200), options?: RequestHandlerOptions) => {
  return http.get('*/my/contracts/:contractId', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetContractResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getGetContractMockHandler200 = (overrideResponse?: GetContract200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetContract200> | GetContract200), options?: RequestHandlerOptions) => {
  return http.get('*/my/contracts/:contractId', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetContractResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}

export const getAcceptContractMockHandler = (overrideResponse?: AcceptContract200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AcceptContract200> | AcceptContract200), options?: RequestHandlerOptions) => {
  return http.post('*/my/contracts/:contractId/accept', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getAcceptContractResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getAcceptContractMockHandler200 = (overrideResponse?: AcceptContract200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AcceptContract200> | AcceptContract200), options?: RequestHandlerOptions) => {
  return http.post('*/my/contracts/:contractId/accept', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getAcceptContractResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}

export const getDeliverContractMockHandler = (overrideResponse?: DeliverContract200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DeliverContract200> | DeliverContract200), options?: RequestHandlerOptions) => {
  return http.post('*/my/contracts/:contractId/deliver', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDeliverContractResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getDeliverContractMockHandler200 = (overrideResponse?: DeliverContract200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DeliverContract200> | DeliverContract200), options?: RequestHandlerOptions) => {
  return http.post('*/my/contracts/:contractId/deliver', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDeliverContractResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}

export const getFulfillContractMockHandler = (overrideResponse?: FulfillContract200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FulfillContract200> | FulfillContract200), options?: RequestHandlerOptions) => {
  return http.post('*/my/contracts/:contractId/fulfill', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getFulfillContractResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getFulfillContractMockHandler200 = (overrideResponse?: FulfillContract200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FulfillContract200> | FulfillContract200), options?: RequestHandlerOptions) => {
  return http.post('*/my/contracts/:contractId/fulfill', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getFulfillContractResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}
export const getContractsMock = () => [
  getGetContractsMockHandler(),
  getGetContractMockHandler(),
  getAcceptContractMockHandler(),
  getDeliverContractMockHandler(),
  getFulfillContractMockHandler()
]
