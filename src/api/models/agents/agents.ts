/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { GetAgent200 } from "../getAgent200";

import type { GetAgents200 } from "../getAgents200";

import type { GetAgentsParams } from "../getAgentsParams";

import type { GetMyAgent200 } from "../getMyAgent200";

import { clientInstance } from "../../client";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Fetch your agent's details.
 * @summary Get Agent
 */
export const getMyAgent = (
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetMyAgent200>(
    { url: `/my/agent`, method: "GET", signal },
    options,
  );
};

export const getGetMyAgentQueryKey = () => {
  return [`/my/agent`] as const;
};

export const getGetMyAgentQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyAgent>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getMyAgent>>, TError, TData>
  >;
  request?: SecondParameter<typeof clientInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMyAgentQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyAgent>>> = ({
    signal,
  }) => getMyAgent(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyAgent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyAgentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyAgent>>
>;
export type GetMyAgentQueryError = unknown;

export function useGetMyAgent<
  TData = Awaited<ReturnType<typeof getMyAgent>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyAgent>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyAgent>>,
          TError,
          Awaited<ReturnType<typeof getMyAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyAgent<
  TData = Awaited<ReturnType<typeof getMyAgent>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyAgent>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyAgent>>,
          TError,
          Awaited<ReturnType<typeof getMyAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyAgent<
  TData = Awaited<ReturnType<typeof getMyAgent>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyAgent>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Agent
 */

export function useGetMyAgent<
  TData = Awaited<ReturnType<typeof getMyAgent>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyAgent>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyAgentQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch agents details.
 * @summary List Agents
 */
export const getAgents = (
  params?: GetAgentsParams,
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetAgents200>(
    { url: `/agents`, method: "GET", params, signal },
    options,
  );
};

export const getGetAgentsQueryKey = (params?: GetAgentsParams) => {
  return [`/agents`, ...(params ? [params] : [])] as const;
};

export const getGetAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = unknown,
>(
  params?: GetAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAgentsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAgents>>> = ({
    signal,
  }) => getAgents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAgents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAgentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAgents>>
>;
export type GetAgentsQueryError = unknown;

export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = unknown,
>(
  params: undefined | GetAgentsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgents>>,
          TError,
          Awaited<ReturnType<typeof getAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = unknown,
>(
  params?: GetAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgents>>,
          TError,
          Awaited<ReturnType<typeof getAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = unknown,
>(
  params?: GetAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Agents
 */

export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = unknown,
>(
  params?: GetAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAgentsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch agent details.
 * @summary Get Public Agent
 */
export const getAgent = (
  agentSymbol: string = "FEBA66",
  options?: SecondParameter<typeof clientInstance>,
  signal?: AbortSignal,
) => {
  return clientInstance<GetAgent200>(
    {
      url: `/agents/${encodeURIComponent(String(agentSymbol))}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetAgentQueryKey = (agentSymbol: string = "FEBA66") => {
  return [`/agents/${agentSymbol}`] as const;
};

export const getGetAgentQueryOptions = <
  TData = Awaited<ReturnType<typeof getAgent>>,
  TError = unknown,
>(
  agentSymbol: string = "FEBA66",
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgent>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAgentQueryKey(agentSymbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAgent>>> = ({
    signal,
  }) => getAgent(agentSymbol, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!agentSymbol,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAgent>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetAgentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAgent>>
>;
export type GetAgentQueryError = unknown;

export function useGetAgent<
  TData = Awaited<ReturnType<typeof getAgent>>,
  TError = unknown,
>(
  agentSymbol: undefined | string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgent>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgent>>,
          TError,
          Awaited<ReturnType<typeof getAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAgent<
  TData = Awaited<ReturnType<typeof getAgent>>,
  TError = unknown,
>(
  agentSymbol?: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgent>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgent>>,
          TError,
          Awaited<ReturnType<typeof getAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAgent<
  TData = Awaited<ReturnType<typeof getAgent>>,
  TError = unknown,
>(
  agentSymbol?: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgent>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Public Agent
 */

export function useGetAgent<
  TData = Awaited<ReturnType<typeof getAgent>>,
  TError = unknown,
>(
  agentSymbol: string = "FEBA66",
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgent>>, TError, TData>
    >;
    request?: SecondParameter<typeof clientInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAgentQueryOptions(agentSymbol, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
