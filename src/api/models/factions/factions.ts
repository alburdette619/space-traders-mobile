/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetFaction200
} from '../getFaction200';

import type {
  GetFactions200
} from '../getFactions200';

import type {
  GetFactionsParams
} from '../getFactionsParams';

import { clientInstance } from '../../client';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Return a paginated list of all the factions in the game.
 * @summary List Factions
 */
export const getFactions = (
    params?: GetFactionsParams,
 options?: SecondParameter<typeof clientInstance>,signal?: AbortSignal
) => {
      
      
      return clientInstance<GetFactions200>(
      {url: `/factions`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getGetFactionsQueryKey = (params?: GetFactionsParams,) => {
    return [
    `/factions`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetFactionsQueryOptions = <TData = Awaited<ReturnType<typeof getFactions>>, TError = unknown>(params?: GetFactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFactions>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFactionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFactions>>> = ({ signal }) => getFactions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFactions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getFactions>>>
export type GetFactionsQueryError = unknown


export function useGetFactions<TData = Awaited<ReturnType<typeof getFactions>>, TError = unknown>(
 params: undefined |  GetFactionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFactions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFactions>>,
          TError,
          Awaited<ReturnType<typeof getFactions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFactions<TData = Awaited<ReturnType<typeof getFactions>>, TError = unknown>(
 params?: GetFactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFactions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFactions>>,
          TError,
          Awaited<ReturnType<typeof getFactions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFactions<TData = Awaited<ReturnType<typeof getFactions>>, TError = unknown>(
 params?: GetFactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFactions>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Factions
 */

export function useGetFactions<TData = Awaited<ReturnType<typeof getFactions>>, TError = unknown>(
 params?: GetFactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFactions>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFactionsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * View the details of a faction.
 * @summary Get Faction
 */
export const getFaction = (
    factionSymbol: string,
 options?: SecondParameter<typeof clientInstance>,signal?: AbortSignal
) => {
      
      
      return clientInstance<GetFaction200>(
      {url: `/factions/${encodeURIComponent(String(factionSymbol))}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetFactionQueryKey = (factionSymbol?: string,) => {
    return [
    `/factions/${factionSymbol}`
    ] as const;
    }

    
export const getGetFactionQueryOptions = <TData = Awaited<ReturnType<typeof getFaction>>, TError = unknown>(factionSymbol: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaction>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFactionQueryKey(factionSymbol);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaction>>> = ({ signal }) => getFaction(factionSymbol, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(factionSymbol), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFaction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFactionQueryResult = NonNullable<Awaited<ReturnType<typeof getFaction>>>
export type GetFactionQueryError = unknown


export function useGetFaction<TData = Awaited<ReturnType<typeof getFaction>>, TError = unknown>(
 factionSymbol: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFaction>>,
          TError,
          Awaited<ReturnType<typeof getFaction>>
        > , 'initialData'
      >, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFaction<TData = Awaited<ReturnType<typeof getFaction>>, TError = unknown>(
 factionSymbol: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFaction>>,
          TError,
          Awaited<ReturnType<typeof getFaction>>
        > , 'initialData'
      >, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFaction<TData = Awaited<ReturnType<typeof getFaction>>, TError = unknown>(
 factionSymbol: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaction>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Faction
 */

export function useGetFaction<TData = Awaited<ReturnType<typeof getFaction>>, TError = unknown>(
 factionSymbol: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaction>>, TError, TData>>, request?: SecondParameter<typeof clientInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFactionQueryOptions(factionSymbol,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




