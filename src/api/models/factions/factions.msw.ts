/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.

The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.

```json http
{
  "method": "GET",
  "url": "https://api.spacetraders.io/v2",
}
```

Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.

We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.



 * OpenAPI spec version: 2.3.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  http
} from 'msw';
import type {
  RequestHandlerOptions
} from 'msw';

import type {
  GetFaction200
} from '../getFaction200';

import type {
  GetFactions200
} from '../getFactions200';
import { Faction } from '../models-Faction/faction';
import { Meta } from '../models-Meta/meta';


export const getGetFactionsResponseMock = (overrideResponse: Partial< GetFactions200 > = {}): GetFactions200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({} as Faction)), meta: {} as Meta, ...overrideResponse})


export const getGetFactionsResponseMock200 = (overrideResponse: Partial< GetFactions200 > = {}): GetFactions200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({} as Faction)), meta: {} as Meta, ...overrideResponse})

export const getGetFactionResponseMock = (overrideResponse: Partial< GetFaction200 > = {}): GetFaction200 => ({data: {} as Faction, ...overrideResponse})


export const getGetFactionResponseMock200 = (overrideResponse: Partial< GetFaction200 > = {}): GetFaction200 => ({data: {} as Faction, ...overrideResponse})


export const getGetFactionsMockHandler = (overrideResponse?: GetFactions200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFactions200> | GetFactions200), options?: RequestHandlerOptions) => {
  return http.get('*/factions', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetFactionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getGetFactionsMockHandler200 = (overrideResponse?: GetFactions200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFactions200> | GetFactions200), options?: RequestHandlerOptions) => {
  return http.get('*/factions', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetFactionsResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}

export const getGetFactionMockHandler = (overrideResponse?: GetFaction200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFaction200> | GetFaction200), options?: RequestHandlerOptions) => {
  return http.get('*/factions/:factionSymbol', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetFactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}


export const getGetFactionMockHandler200 = (overrideResponse?: GetFaction200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFaction200> | GetFaction200), options?: RequestHandlerOptions) => {
  return http.get('*/factions/:factionSymbol', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetFactionResponseMock200()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}
export const getFactionsMock = () => [
  getGetFactionsMockHandler(),
  getGetFactionMockHandler()
]
